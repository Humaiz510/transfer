AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaRegressionTestFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: 'arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_ROLE'
      Code:
        ZipFile: |
          import boto3
          import subprocess
          import json
          
          class TestLambdaRegressionSuite:
              # ... (Include the full class implementation here)

          def lambda_handler(event, context):
              lambda_name = event['detail']['requestParameters']['functionName']
              
              test_class = TestLambdaRegressionSuite()
              test_class.set_lambda_name(lambda_name)
              
              # Run pytest programmatically
              result = subprocess.run(['pytest', '--tb=short', '-q'], capture_output=True, text=True)
              
              if result.returncode != 0:
                  raise Exception(f"Tests failed:\n{result.stdout}\n{result.stderr}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Tests executed successfully')
              }

      Runtime: 'python3.8'
      Timeout: 300

  LambdaPatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - 'aws.lambda'
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventName:
            - 'UpdateFunctionCode'
            - 'UpdateFunctionConfiguration'
      Targets:
        - Arn: !GetAtt LambdaRegressionTestFunction.Arn
          Id: "LambdaPatchTrigger"
          
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaRegressionTestFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaPatchEventRule.Arn
